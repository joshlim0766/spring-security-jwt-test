CREATE SCHEMA IF NOT EXISTS system_service AUTHORIZATION sa;

CREATE TABLE IF NOT EXISTS system_service.config
(
    key VARCHAR(200),
    value VARCHAR(4000),
    PRIMARY KEY (key)
);

INSERT INTO system_service.config
(key, value)
SELECT 'JWT_SECRET_KEY', '$2a$16$W6NcwYtpr1GaMvUfgJduZ.dteI/FDFxP2gzOyb0cECTfObQGesPxC'
  FROM dual
 WHERE NOT EXISTS(SELECT * FROM system_service.config WHERE key = 'JWT_SECRET_KEY');

INSERT INTO system_service.config
(key, value)
SELECT 'JWT_TOKEN_EXPIRATION', '3600000'
  FROM dual
 WHERE NOT EXISTS(SELECT * FROM system_service.config WHERE key = 'JWT_TOKEN_EXPIRATION');

CREATE TABLE IF NOT EXISTS system_service.roles
(
    role_uid INTEGER GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(20),
    PRIMARY KEY (role_uid)
);

INSERT INTO system_service.roles
(name)
SELECT 'ROLE_ADMIN'
FROM dual
WHERE NOT EXISTS(SELECT * FROM system_service.roles WHERE name = 'ROLE_ADMIN');

INSERT INTO system_service.roles
(name)
SELECT 'ROLE_BASIC'
  FROM dual
 WHERE NOT EXISTS(SELECT * FROM system_service.roles WHERE name = 'ROLE_BASIC');

ALTER TABLE system_service.roles DROP CONSTRAINT IF EXISTS uk_role_name;
ALTER TABLE system_service.roles ADD CONSTRAINT uk_role_name UNIQUE (name);

CREATE TABLE IF NOT EXISTS system_service.users
(
    user_uid INTEGER GENERATED BY DEFAULT AS IDENTITY,
    user_id VARCHAR(32),
    user_password VARCHAR(64),
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    PRIMARY KEY (user_uid)
);

CREATE INDEX IF NOT EXISTS system_service.ix_users_1 ON system_service.users (user_id);

ALTER TABLE system_service.users DROP CONSTRAINT IF EXISTS uk_user_id;
ALTER TABLE system_service.users ADD CONSTRAINT uk_user_id UNIQUE (user_id);

INSERT INTO system_service.users
(user_id, user_password, created_at, updated_at)
SELECT 'admin', '$2a$16$U7k49pF1rRN9HlaJbcmxXOUZqnXKvCwujEBe95027OzOl/fP8p2mi', NOW(), NOW()
FROM dual
WHERE NOT EXISTS(SELECT * FROM system_service.users WHERE user_id = 'admin');

INSERT INTO system_service.users
(user_id, user_password, created_at, updated_at)
SELECT 'normal', '$2a$16$CFR7aAe/eN7YqU5toefnm.QtmWS6aSJSZ5EFrFbkWwYQKLrfseEpy', NOW(), NOW()
  FROM dual
 WHERE NOT EXISTS(SELECT * FROM system_service.users WHERE user_id = 'normal');

CREATE TABLE IF NOT EXISTS system_service.user_roles
(
    user_uid INTEGER,
    role_uid INTEGER,

    PRIMARY KEY (user_uid, role_uid)
);

INSERT INTO system_service.user_roles
(user_uid, role_uid)
SELECT (SELECT user_uid from system_service.users WHERE user_id = 'admin'),
       (SELECT role_uid from system_service.roles WHERE name = 'ROLE_BASIC')
  FROM dual
 WHERE NOT EXISTS(
     SELECT *
       FROM system_service.user_roles
      WHERE user_uid = (SELECT user_uid from system_service.users WHERE user_id = 'admin')
        AND role_uid = (SELECT role_uid from system_service.roles WHERE name = 'ROLE_BASIC')
 );

INSERT INTO system_service.user_roles
(user_uid, role_uid)
SELECT (SELECT user_uid from system_service.users WHERE user_id = 'admin'),
       (SELECT role_uid from system_service.roles WHERE name = 'ROLE_ADMIN')
FROM dual
WHERE NOT EXISTS(
        SELECT *
        FROM system_service.user_roles
        WHERE user_uid = (SELECT user_uid from system_service.users WHERE user_id = 'admin')
          AND role_uid = (SELECT role_uid from system_service.roles WHERE name = 'ROLE_ADMIN')
    );

INSERT INTO system_service.user_roles
(user_uid, role_uid)
SELECT (SELECT user_uid from system_service.users WHERE user_id = 'normal'),
       (SELECT role_uid from system_service.roles WHERE name = 'ROLE_BASIC')
FROM dual
WHERE NOT EXISTS(
        SELECT *
        FROM system_service.user_roles
        WHERE user_uid = (SELECT user_uid from system_service.users WHERE user_id = 'normal')
          AND role_uid = (SELECT role_uid from system_service.roles WHERE name = 'ROLE_BASIC')
    );

CREATE TABLE IF NOT EXISTS spring_session
(
    primary_id CHAR(36) NOT NULL,
    session_id CHAR(36) NOT NULL,
    creation_time BIGINT NOT NULL,
    last_access_time BIGINT NOT NULL,
    max_inactive_interval INT NOT NULL,
    expiry_time BIGINT NOT NULL,
    principal_name VARCHAR(100),
    CONSTRAINT spring_session_pk PRIMARY KEY (primary_id)
);

CREATE UNIQUE INDEX IF NOT EXISTS spring_session_ix1 ON spring_session (session_id);
CREATE INDEX IF NOT EXISTS spring_session_ix2 ON spring_session (expiry_time);
CREATE INDEX IF NOT EXISTS spring_session_ix3 ON spring_session (principal_name);

CREATE TABLE IF NOT EXISTS spring_session_attributes
(
    session_primary_id CHAR(36) NOT NULL,
    attribute_name VARCHAR(200) NOT NULL,
    attribute_bytes LONGVARBINARY NOT NULL,
    CONSTRAINT spring_session_attributes_pk PRIMARY KEY (session_primary_id, attribute_name),
    CONSTRAINT spring_session_attributes_fk FOREIGN KEY (session_primary_id) REFERENCES spring_session(primary_id) ON DELETE CASCADE
);
